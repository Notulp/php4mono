/* The following code was generated by CSFlex 1.4 on 02.03.2006 */

#line 1 "PHP\Compiler\mPHP.flex"
/**
   +----------------------------------------------------------------------+
   | mPHP Lexer 0.1                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2005 Raphael Romeikat (http://www.raffa.de)            |
   +----------------------------------------------------------------------+
   | Author: Raphael Romeikat <raffa@raffa.de>                            |
   +----------------------------------------------------------------------+
*/

using TUVienna.CS_CUP.Runtime;
using System;
using System.IO;
using System.Text;
using System.Collections;
using PHP;
using PHP.Compiler;
using Array = System.Array;
using Exception = System.Exception;


#line default
/**
 * This class is a scanner generated by <a href="http://www.sourceforge.net/projects/csflex/">C# Flex</a>, based on
 * <a href="http://www.jflex.de/">JFlex</a>, version 1.4
 * on 02.03.2006 from the specification file
 * <tt>PHP/Compiler/mPHP.flex</tt>
 */
class Scanner: TUVienna.CS_CUP.Runtime.Scanner {
  /** This character denotes the end of file */
  public const int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private const int ZZ_BUFFERSIZE = 16384;
  /**
   * This is used in 'if' statements to eliminate dead code
   * warnings for 'break;' after the end of a user action
   * block of code. The Java version does this by emitting
   * a second 'case' which is impossible to reach. Since this
   * is impossible for the compiler to deduce during semantic
   * analysis, the warning is stifled. However, C# does not
   * permit 'case' blocks to flow into each other, so the C#
   * output mode needs a different approach. In this case,
   * the entire user code is wrapped up in an 'if' statement
   * whose condition is always true. No warning is emitted
   * because the compiler doesn't strictly propagate the value
   * of 'static readonly' fields, and thus does not semantically
   * detect the fact that the 'if' will always be true.
   */
   public static readonly bool ZZ_SPURIOUS_WARNINGS_SUCK = true;

  /** lexical states */
  public const int ST_LOOKING_FOR_VARNAME = 14;
  public const int ST_ONE_LINE_COMMENT = 20;
  public const int ST_DOC_COMMENT = 18;
  public const int ST_BACKQUOTE = 8;
  public const int ST_LOOKING_FOR_PROPERTY = 12;
  public const int YYINITIAL = 0;
  public const int ST_DOUBLE_QUOTES = 4;
  public const int ST_SINGLE_QUOTE = 6;
  public const int ST_IN_SCRIPTING = 2;
  public const int ST_HEREDOC = 10;
  public const int ST_COMMENT = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static readonly int[] ZZ_LEXSTATE = new int[]{ 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11
  };
  static Scanner()
  {
    ZZ_ACTION = zzUnpackAction();
    ZZ_ROWMAP = zzUnpackRowMap();
    ZZ_TRANS = zzUnpackTrans();
    ZZ_ATTRIBUTE = zzUnpackAttribute();
  }


  /** 
   * Translates characters to character classes
   */
  private static readonly char[] ZZ_CMAP = new char[] {
    (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char)10, (char)16, (char) 0, (char) 0, (char) 9, (char) 0, (char) 0, 
    (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, 
    (char)10, (char)48, (char)73, (char)15, (char)62, (char)51, (char)52, (char)74, (char)41, (char)43, (char)50, (char) 4, (char)11, (char)37, (char) 2, (char)12, 
    (char) 5, (char)78, (char)78, (char)78, (char)78, (char)78, (char)78, (char)78, (char) 1, (char) 1, (char)39, (char)77, (char)49, (char)47, (char)38, (char)72, 
    (char)11, (char)57, (char) 7, (char)63, (char)59, (char) 3, (char)66, (char) 8, (char)71, (char)69, (char) 8, (char) 8, (char)64, (char)70, (char)58, (char)55, 
    (char) 8, (char) 8, (char)56, (char)65, (char)68, (char)67, (char) 8, (char) 8, (char)60, (char) 8, (char) 8, (char)14, (char)75, (char)14, (char)54, (char)45, 
    (char)76, (char)29, (char)33, (char)24, (char)20, (char)17, (char)21, (char)42, (char)30, (char)18, (char)44, (char)34, (char)32, (char)36, (char)23, (char)25, 
    (char)35, (char)46, (char)27, (char)26, (char)19, (char)22, (char)40, (char)31, (char) 6, (char)28, (char) 8, (char)61, (char)53, (char)13, (char)11, (char) 8, 
    (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, 
    (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, 
    (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, 
    (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, 
    (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, 
    (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, 
    (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, 
    (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8, (char) 8
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static readonly int [] ZZ_ACTION;

  private static readonly ushort[] ZZ_ACTION_PACKED_0 = new ushort[] {
    12, 0, 2, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 4, 1, 3,
    1, 6, 2, 4, 1, 7, 1, 8, 15, 5, 3, 4, 1, 5, 1, 4,
    2, 5, 8, 4, 3, 5, 1, 9, 2, 4, 1, 10, 1, 11, 1, 12,
    1, 13, 1, 14, 1, 15, 1, 13, 1, 16, 1, 14, 2, 16, 1, 17,
    1, 2, 1, 18, 1, 19, 1, 20, 1, 2, 1, 21, 1, 2, 1, 22,
    1, 23, 1, 14, 1, 2, 1, 15, 1, 24, 1, 25, 1, 26, 1, 27,
    1, 28, 2, 29, 1, 30, 2, 31, 2, 32, 1, 0, 1, 1, 1, 33,
    1, 34, 1, 35, 1, 0, 1, 36, 1, 37, 1, 38, 1, 0, 1, 39,
    1, 40, 6, 5, 1, 41, 7, 5, 1, 42, 12, 5, 1, 43, 7, 5,
    1, 44, 1, 45, 1, 46, 1, 47, 1, 48, 1, 49, 1, 5, 10, 0,
    2, 5, 1, 50, 1, 51, 1, 52, 1, 0, 1, 52, 1, 53, 1, 54,
    1, 55, 1, 56, 1, 57, 1, 58, 1, 59, 1, 60, 1, 61, 1, 62,
    1, 63, 2, 5, 1, 64, 1, 65, 1, 0, 1, 66, 2, 0, 1, 67,
    2, 0, 1, 45, 1, 68, 1, 69, 1, 70, 1, 71, 1, 72, 1, 71,
    1, 73, 1, 0, 1, 74, 1, 75, 1, 76, 2, 77, 1, 0, 1, 78,
    1, 79, 1, 80, 1, 0, 1, 81, 1, 0, 1, 35, 1, 0, 1, 82,
    1, 0, 12, 5, 1, 83, 3, 5, 1, 84, 2, 5, 1, 85, 1, 5,
    1, 86, 1, 5, 1, 87, 17, 5, 1, 88, 1, 89, 9, 0, 5, 5,
    1, 90, 1, 91, 1, 0, 1, 92, 1, 0, 2, 56, 1, 93, 1, 94,
    2, 65, 1, 13, 1, 72, 1, 95, 2, 0, 1, 96, 1, 97, 6, 5,
    1, 98, 1, 99, 1, 5, 1, 100, 16, 5, 1, 101, 9, 5, 1, 102,
    5, 5, 9, 0, 6, 5, 2, 0, 1, 72, 1, 95, 2, 0, 1, 5,
    1, 103, 5, 5, 1, 104, 3, 5, 1, 105, 1, 5, 1, 106, 2, 5,
    1, 107, 2, 5, 1, 108, 1, 109, 1, 5, 1, 110, 1, 111, 1, 112,
    1, 113, 4, 5, 1, 114, 1, 5, 1, 115, 1, 116, 1, 5, 1, 117,
    2, 5, 2, 0, 1, 118, 8, 0, 6, 5, 1, 0, 2, 119, 1, 0,
    2, 120, 2, 5, 1, 121, 2, 5, 1, 122, 9, 5, 1, 123, 1, 124,
    1, 125, 2, 5, 1, 126, 2, 5, 5, 0, 1, 127, 3, 0, 1, 128,
    1, 129, 5, 5, 2, 0, 1, 130, 5, 5, 1, 131, 2, 5, 1, 132,
    1, 133, 1, 5, 1, 134, 1, 5, 1, 135, 1, 5, 1, 136, 1, 5,
    1, 0, 1, 137, 2, 0, 1, 138, 1, 0, 5, 5, 2, 0, 3, 5,
    1, 139, 4, 5, 1, 140, 1, 141, 1, 5, 1, 142, 1, 5, 1, 143,
    1, 144, 1, 145, 2, 5, 1, 146, 1, 5, 2, 0, 2, 5, 1, 147,
    1, 148, 4, 5, 1, 149, 1, 5, 1, 150, 1, 5, 1, 0, 1, 151,
    1, 152, 1, 5, 1, 153, 1, 154, 2, 5, 1, 155, 1, 0, 3, 5,
    1, 0, 1, 156, 1, 157, 1, 158, 14, 0, 1, 34, 2, 0, 0 };

  private static int [] zzUnpackAction() {
    int [] result = new int[554];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static readonly int [] ZZ_ROWMAP;

  private static readonly ushort[] ZZ_ROWMAP_PACKED_0 = new ushort[] {
    0, 0, 0, 79, 0, 158, 0, 237, 0, 0x013c, 0, 0x018b, 0, 0x01da, 0, 0x0229,
    0, 0x0278, 0, 0x02c7, 0, 0x0316, 0, 0x0365, 0, 0x03b4, 0, 0x0403, 0, 0x0452, 0, 0x04a1,
    0, 0x04f0, 0, 0x053f, 0, 0x058e, 0, 0x05dd, 0, 0x062c, 0, 0x0452, 0, 0x067b, 0, 0x0452,
    0, 0x0452, 0, 0x06ca, 0, 0x0719, 0, 0x0768, 0, 0x07b7, 0, 0x0806, 0, 0x0855, 0, 0x08a4,
    0, 0x08f3, 0, 0x0942, 0, 0x0991, 0, 0x09e0, 0, 0x0a2f, 0, 0x0a7e, 0, 0x0acd, 0, 0x0b1c,
    0, 0x0b6b, 0, 0x0bba, 0, 0x0c09, 0, 0x0c58, 0, 0x0ca7, 0, 0x0cf6, 0, 0x0d45, 0, 0x0d94,
    0, 0x0de3, 0, 0x0e32, 0, 0x0e81, 0, 0x0ed0, 0, 0x0f1f, 0, 0x0f6e, 0, 0x0fbd, 0, 0x100c,
    0, 0x105b, 0, 0x10aa, 0, 0x0452, 0, 0x10f9, 0, 0x1148, 0, 0x1197, 0, 0x11e6, 0, 0x0452,
    0, 0x1235, 0, 0x1284, 0, 0x12d3, 0, 0x1322, 0, 0x0452, 0, 0x1371, 0, 0x13c0, 0, 0x140f,
    0, 0x0452, 0, 0x145e, 0, 0x14ad, 0, 0x14fc, 0, 0x0452, 0, 0x154b, 0, 0x159a, 0, 0x15e9,
    0, 0x0452, 0, 0x1638, 0, 0x1687, 0, 0x16d6, 0, 0x1725, 0, 0x0452, 0, 0x1774, 0, 0x0452,
    0, 0x17c3, 0, 0x1812, 0, 0x1861, 0, 0x18b0, 0, 0x18ff, 0, 0x194e, 0, 0x0452, 0, 0x0452,
    0, 0x199d, 0, 0x19ec, 0, 0x1a3b, 0, 0x1a8a, 0, 0x1ad9, 0, 0x1b28, 0, 0x1b77, 0, 0x0452,
    0, 0x0452, 0, 0x0452, 0, 0x1bc6, 0, 0x0452, 0, 0x1c15, 0, 0x1c64, 0, 0x1cb3, 0, 0x1d02,
    0, 0x1d51, 0, 0x1da0, 0, 0x1def, 0, 0x053f, 0, 0x1e3e, 0, 0x1e8d, 0, 0x1edc, 0, 0x1f2b,
    0, 0x1f7a, 0, 0x1fc9, 0, 0x2018, 0, 0x053f, 0, 0x2067, 0, 0x20b6, 0, 0x2105, 0, 0x2154,
    0, 0x21a3, 0, 0x21f2, 0, 0x2241, 0, 0x2290, 0, 0x22df, 0, 0x232e, 0, 0x237d, 0, 0x23cc,
    0, 0x053f, 0, 0x241b, 0, 0x246a, 0, 0x24b9, 0, 0x2508, 0, 0x2557, 0, 0x25a6, 0, 0x25f5,
    0, 0x0452, 0, 0x0452, 0, 0x0452, 0, 0x2644, 0, 0x0452, 0, 0x0452, 0, 0x2693, 0, 0x0ca7,
    0, 0x26e2, 0, 0x2731, 0, 0x2780, 0, 0x27cf, 0, 0x281e, 0, 0x286d, 0, 0x28bc, 0, 0x290b,
    0, 0x295a, 0, 0x29a9, 0, 0x29f8, 0, 0x0452, 0, 0x2a47, 0, 0x2a96, 0, 0x2ae5, 0, 0x0452,
    0, 0x0452, 0, 0x2b34, 0, 0x0452, 0, 0x2b83, 0, 0x0452, 0, 0x0452, 0, 0x0452, 0, 0x0452,
    0, 0x0452, 0, 0x0452, 0, 0x053f, 0, 0x2bd2, 0, 0x2c21, 0, 0x2c70, 0, 0x2cbf, 0, 0x1197,
    0, 0x0452, 0, 0x2d0e, 0, 0x11e6, 0, 0x0452, 0, 0x2d5d, 0, 0x2dac, 0, 0x1284, 0, 0x0452,
    0, 0x0452, 0, 0x0452, 0, 0x0452, 0, 0x2dfb, 0, 0x2e4a, 0, 0x0452, 0, 0x2e99, 0, 0x0452,
    0, 0x0452, 0, 0x0452, 0, 0x2ee8, 0, 0x0452, 0, 0x2f37, 0, 0x0452, 0, 0x0452, 0, 0x0452,
    0, 0x2f86, 0, 0x0452, 0, 0x2fd5, 0, 0x3024, 0, 0x3024, 0, 0x1bc6, 0, 0x3073, 0, 0x30c2,
    0, 0x3111, 0, 0x3160, 0, 0x31af, 0, 0x31fe, 0, 0x324d, 0, 0x329c, 0, 0x32eb, 0, 0x333a,
    0, 0x3389, 0, 0x33d8, 0, 0x3427, 0, 0x053f, 0, 0x3476, 0, 0x34c5, 0, 0x3514, 0, 0x053f,
    0, 0x3563, 0, 0x35b2, 0, 0x3601, 0, 0x3650, 0, 0x053f, 0, 0x369f, 0, 0x053f, 0, 0x36ee,
    0, 0x373d, 0, 0x378c, 0, 0x37db, 0, 0x382a, 0, 0x3879, 0, 0x38c8, 0, 0x3917, 0, 0x3966,
    0, 0x39b5, 0, 0x3a04, 0, 0x3a53, 0, 0x3aa2, 0, 0x3af1, 0, 0x3b40, 0, 0x3b8f, 0, 0x3bde,
    0, 0x0452, 0, 0x053f, 0, 0x3c2d, 0, 0x3c7c, 0, 0x3ccb, 0, 0x3d1a, 0, 0x3d69, 0, 0x3db8,
    0, 0x3e07, 0, 0x3e56, 0, 0x3ea5, 0, 0x3ef4, 0, 0x3f43, 0, 0x3f92, 0, 0x3fe1, 0, 0x4030,
    0, 0x0452, 0, 0x0452, 0, 0x407f, 0, 0x0452, 0, 0x40ce, 0, 0x411d, 0, 0x0452, 0, 0x053f,
    0, 0x053f, 0, 0x416c, 0, 0x0452, 0, 0x2dac, 0, 0x41bb, 0, 0x420a, 0, 0x4259, 0, 0x42a8,
    0, 0x3073, 0, 0x053f, 0, 0x42f7, 0, 0x4346, 0, 0x4395, 0, 0x43e4, 0, 0x4433, 0, 0x4482,
    0, 0x053f, 0, 0x44d1, 0, 0x4520, 0, 0x053f, 0, 0x456f, 0, 0x45be, 0, 0x460d, 0, 0x465c,
    0, 0x46ab, 0, 0x46fa, 0, 0x4749, 0, 0x4798, 0, 0x47e7, 0, 0x4836, 0, 0x4885, 0, 0x48d4,
    0, 0x4923, 0, 0x4972, 0, 0x49c1, 0, 0x4a10, 0, 0x053f, 0, 0x4a5f, 0, 0x4aae, 0, 0x4afd,
    0, 0x4b4c, 0, 0x4b9b, 0, 0x4bea, 0, 0x4c39, 0, 0x4c88, 0, 0x4cd7, 0, 0x053f, 0, 0x4d26,
    0, 0x4d75, 0, 0x4dc4, 0, 0x4e13, 0, 0x4e62, 0, 0x4eb1, 0, 0x4f00, 0, 0x4f4f, 0, 0x4f9e,
    0, 0x4fed, 0, 0x503c, 0, 0x508b, 0, 0x50da, 0, 0x5129, 0, 0x5178, 0, 0x51c7, 0, 0x5216,
    0, 0x5265, 0, 0x52b4, 0, 0x5303, 0, 0x5352, 0, 0x53a1, 0, 0x0452, 0, 0x0452, 0, 0x53f0,
    0, 0x543f, 0, 0x548e, 0, 0x053f, 0, 0x54dd, 0, 0x552c, 0, 0x557b, 0, 0x55ca, 0, 0x5619,
    0, 0x053f, 0, 0x5668, 0, 0x56b7, 0, 0x5706, 0, 0x053f, 0, 0x5755, 0, 0x053f, 0, 0x57a4,
    0, 0x57f3, 0, 0x053f, 0, 0x5842, 0, 0x5891, 0, 0x053f, 0, 0x053f, 0, 0x58e0, 0, 0x053f,
    0, 0x053f, 0, 0x053f, 0, 0x053f, 0, 0x592f, 0, 0x597e, 0, 0x59cd, 0, 0x5a1c, 0, 0x053f,
    0, 0x5a6b, 0, 0x053f, 0, 0x053f, 0, 0x5aba, 0, 0x053f, 0, 0x5b09, 0, 0x5b58, 0, 0x5ba7,
    0, 0x5bf6, 0, 0x0452, 0, 0x5c45, 0, 0x5c94, 0, 0x5ce3, 0, 0x5d32, 0, 0x5d81, 0, 0x5dd0,
    0, 0x5e1f, 0, 0x5e6e, 0, 0x5ebd, 0, 0x5f0c, 0, 0x5f5b, 0, 0x5faa, 0, 0x5ff9, 0, 0x6048,
    0, 0x6097, 0, 0x60e6, 0, 0x0452, 0, 0x6135, 0, 0x6184, 0, 0x0452, 0, 0x61d3, 0, 0x6222,
    0, 0x6271, 0, 0x62c0, 0, 0x630f, 0, 0x053f, 0, 0x635e, 0, 0x63ad, 0, 0x63fc, 0, 0x644b,
    0, 0x649a, 0, 0x64e9, 0, 0x6538, 0, 0x6587, 0, 0x65d6, 0, 0x053f, 0, 0x053f, 0, 0x053f,
    0, 0x6625, 0, 0x6674, 0, 0x053f, 0, 0x66c3, 0, 0x6712, 0, 0x6761, 0, 0x67b0, 0, 0x67ff,
    0, 0x684e, 0, 0x689d, 0, 0x0452, 0, 0x68ec, 0, 0x693b, 0, 0x698a, 0, 0x0452, 0, 0x053f,
    0, 0x69d9, 0, 0x6a28, 0, 0x6a77, 0, 0x6ac6, 0, 0x6b15, 0, 0x6b64, 0, 0x6bb3, 0, 0x053f,
    0, 0x6c02, 0, 0x6c51, 0, 0x6ca0, 0, 0x6cef, 0, 0x6d3e, 0, 0x6d8d, 0, 0x6ddc, 0, 0x6e2b,
    0, 0x053f, 0, 0x053f, 0, 0x6e7a, 0, 0x053f, 0, 0x6ec9, 0, 0x6f18, 0, 0x6f67, 0, 0x053f,
    0, 0x6fb6, 0, 0x7005, 0, 0x0452, 0, 0x7054, 0, 0x70a3, 0, 0x0452, 0, 0x70f2, 0, 0x7141,
    0, 0x7190, 0, 0x71df, 0, 0x722e, 0, 0x727d, 0, 0x72cc, 0, 0x731b, 0, 0x736a, 0, 0x73b9,
    0, 0x7408, 0, 0x053f, 0, 0x7457, 0, 0x74a6, 0, 0x74f5, 0, 0x7544, 0, 0x053f, 0, 0x053f,
    0, 0x7593, 0, 0x053f, 0, 0x75e2, 0, 0x0452, 0, 0x0452, 0, 0x053f, 0, 0x7631, 0, 0x7680,
    0, 0x053f, 0, 0x76cf, 0, 0x771e, 0, 0x776d, 0, 0x77bc, 0, 0x780b, 0, 0x053f, 0, 0x053f,
    0, 0x785a, 0, 0x78a9, 0, 0x78f8, 0, 0x7947, 0, 0x053f, 0, 0x7996, 0, 0x053f, 0, 0x79e5,
    0, 0x7a34, 0, 0x053f, 0, 0x053f, 0, 0x7a83, 0, 0x053f, 0, 0x053f, 0, 0x7ad2, 0, 0x7b21,
    0, 0x053f, 0, 0x7b70, 0, 0x7bbf, 0, 0x7c0e, 0, 0x7c5d, 0, 0x7cac, 0, 0x053f, 0, 0x053f,
    0, 0x053f, 0, 0x7cfb, 0, 0x7d4a, 0, 0x7d99, 0, 0x7de8, 0, 0x7e37, 0, 0x7e86, 0, 0x7ed5,
    0, 0x7f24, 0, 0x7f73, 0, 0x7fc2, 0, 0x8011, 0, 0x8060, 0, 0x80af, 0, 0x80fe, 0, 0x0452,
    0, 0x814d, 0, 0x819c, 0 };

  private static int [] zzUnpackRowMap() {
    int [] result = new int[554];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(ushort[] packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int high = packed[i++] << 16;
      result[j++] = high | packed[i++];
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static readonly int [] ZZ_TRANS;

  private static readonly ushort[] ZZ_TRANS_PACKED_0 = new ushort[] {
    49, 13, 1, 14, 29, 13, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19,
    1, 20, 3, 18, 2, 21, 1, 22, 1, 23, 1, 24, 1, 22, 1, 25,
    1, 21, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31, 1, 32,
    1, 33, 1, 18, 1, 34, 1, 35, 1, 18, 1, 36, 1, 18, 1, 37,
    1, 38, 1, 39, 1, 18, 1, 40, 1, 18, 1, 41, 1, 42, 1, 43,
    1, 44, 1, 45, 1, 46, 1, 22, 1, 18, 1, 47, 1, 18, 1, 48,
    1, 49, 1, 50, 1, 51, 1, 52, 1, 53, 1, 54, 1, 55, 1, 56,
    1, 18, 1, 57, 2, 18, 1, 58, 1, 59, 1, 60, 9, 18, 1, 61,
    1, 62, 1, 63, 1, 15, 1, 64, 1, 22, 1, 16, 1, 15, 1, 65,
    1, 66, 1, 67, 1, 66, 1, 68, 3, 67, 3, 66, 1, 15, 2, 69,
    2, 66, 20, 67, 1, 70, 2, 66, 1, 67, 1, 66, 1, 67, 1, 66,
    3, 67, 8, 66, 6, 67, 1, 71, 1, 72, 9, 67, 1, 66, 1, 73,
    1, 66, 1, 74, 1, 75, 1, 66, 1, 65, 74, 76, 1, 77, 1, 78,
    3, 76, 1, 15, 1, 65, 1, 66, 1, 67, 1, 66, 1, 68, 3, 67,
    3, 66, 1, 15, 2, 69, 2, 66, 20, 67, 1, 70, 2, 66, 1, 67,
    1, 66, 1, 67, 1, 66, 3, 67, 8, 66, 6, 67, 1, 71, 1, 72,
    9, 67, 1, 66, 1, 79, 1, 66, 1, 80, 1, 81, 1, 66, 1, 65,
    1, 15, 1, 65, 1, 66, 1, 67, 1, 66, 1, 68, 3, 67, 3, 66,
    1, 15, 2, 69, 2, 66, 20, 67, 1, 70, 2, 66, 1, 67, 1, 66,
    1, 67, 1, 66, 3, 67, 8, 66, 6, 67, 1, 71, 1, 72, 9, 67,
    1, 66, 1, 82, 1, 83, 1, 84, 1, 82, 1, 66, 1, 65, 1, 15,
    1, 65, 1, 66, 1, 85, 1, 66, 1, 68, 3, 85, 3, 66, 1, 15,
    2, 69, 2, 66, 20, 85, 1, 70, 2, 66, 1, 85, 1, 66, 1, 85,
    1, 66, 3, 85, 8, 66, 6, 85, 1, 71, 1, 72, 9, 85, 1, 66,
    1, 82, 1, 83, 1, 84, 1, 82, 1, 66, 1, 65, 3, 86, 1, 87,
    2, 86, 3, 87, 8, 86, 20, 87, 3, 86, 1, 87, 1, 86, 1, 87,
    1, 86, 3, 87, 8, 86, 6, 87, 2, 86, 9, 87, 7, 86, 3, 88,
    1, 89, 2, 88, 3, 89, 8, 88, 20, 89, 3, 88, 1, 89, 1, 88,
    1, 89, 1, 88, 3, 89, 8, 88, 6, 89, 2, 88, 9, 89, 7, 88,
    50, 90, 1, 91, 78, 90, 1, 92, 28, 90, 9, 93, 1, 94, 6, 93,
    1, 95, 21, 93, 1, 96, 12, 93, 1, 97, 20, 93, 1, 97, 6, 93,
    49, 13, 1, 98, 55, 13, 1, 99, 22, 13, 1, 0, 1, 13, 1, 100,
    20, 13, 1, 101, 6, 13, 80, 0, 1, 16, 1, 102, 1, 103, 1, 0,
    1, 16, 11, 0, 1, 103, 60, 0, 1, 16, 1, 0, 1, 102, 3, 0,
    1, 102, 41, 0, 1, 104, 30, 0, 1, 102, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 20, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 4, 0, 1, 105, 42, 0, 1, 106, 32, 0, 1, 16, 1, 102,
    1, 103, 1, 0, 1, 16, 1, 107, 10, 0, 1, 103, 60, 0, 1, 16,
    9, 0, 2, 21, 5, 0, 1, 21, 74, 0, 1, 25, 34, 0, 1, 108,
    2, 0, 1, 109, 29, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 110, 2, 18, 8, 0, 6, 18, 1, 111, 1, 112, 7, 18, 1, 113,
    3, 18, 1, 114, 3, 0, 1, 115, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 4, 18, 1, 116, 1, 18,
    1, 117, 2, 18, 1, 118, 9, 18, 1, 119, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    10, 18, 1, 120, 2, 18, 1, 121, 6, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    1, 122, 1, 123, 6, 18, 1, 124, 11, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    1, 18, 1, 125, 3, 18, 1, 126, 2, 18, 1, 127, 11, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 6, 18, 1, 128, 2, 18, 1, 129, 10, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 1, 130, 19, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 8, 18,
    1, 131, 3, 18, 1, 132, 2, 18, 1, 133, 4, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 2, 18, 1, 134, 11, 18, 1, 135, 5, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 1, 136, 19, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 9, 18, 1, 137,
    1, 138, 5, 18, 1, 139, 3, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 13, 18,
    1, 140, 6, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 18, 1, 141, 18, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 10, 18, 1, 142, 9, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 5, 18, 1, 143, 4, 18, 1, 144, 9, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 37, 0, 1, 145, 1, 146, 8, 0, 1, 147, 69, 0,
    1, 148, 8, 0, 1, 149, 70, 0, 1, 150, 40, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 12, 18, 1, 151, 7, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 10, 0, 1, 152, 7, 0, 1, 153, 1, 0,
    1, 154, 1, 155, 1, 156, 2, 0, 1, 157, 1, 158, 1, 159, 1, 0,
    1, 160, 3, 0, 1, 161, 46, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 15, 18, 1, 162, 4, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    20, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 163,
    1, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 38, 0,
    1, 164, 8, 0, 1, 165, 78, 0, 1, 166, 43, 0, 1, 167, 25, 0,
    1, 168, 8, 0, 1, 169, 1, 0, 1, 170, 76, 0, 1, 171, 69, 0,
    1, 172, 8, 0, 1, 173, 78, 0, 1, 174, 4, 0, 1, 175, 73, 0,
    1, 176, 5, 0, 1, 177, 72, 0, 1, 178, 32, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 20, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 1, 18, 1, 179, 4, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 20, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 3, 18, 1, 180, 2, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    20, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    1, 181, 5, 18, 2, 0, 9, 18, 6, 0, 1, 18, 3, 0, 1, 182,
    2, 0, 3, 182, 8, 0, 20, 182, 3, 0, 1, 182, 1, 0, 1, 182,
    1, 0, 3, 182, 8, 0, 6, 182, 2, 0, 9, 182, 45, 0, 1, 183,
    40, 0, 62, 184, 1, 0, 10, 184, 1, 185, 1, 184, 1, 186, 3, 184,
    74, 187, 1, 188, 1, 189, 3, 187, 1, 0, 1, 65, 3, 0, 1, 65,
    72, 0, 1, 65, 2, 0, 1, 66, 1, 0, 1, 66, 4, 0, 3, 66,
    3, 0, 2, 66, 20, 0, 3, 66, 1, 0, 1, 66, 1, 0, 1, 66,
    3, 0, 8, 66, 17, 0, 1, 66, 1, 0, 1, 66, 2, 0, 1, 66,
    2, 0, 1, 67, 1, 0, 1, 67, 1, 0, 4, 67, 8, 0, 20, 67,
    3, 0, 1, 67, 1, 0, 1, 67, 1, 0, 3, 67, 8, 0, 6, 67,
    2, 0, 9, 67, 6, 0, 1, 67, 1, 0, 1, 65, 3, 0, 1, 65,
    1, 190, 71, 0, 1, 65, 2, 0, 1, 66, 1, 0, 1, 66, 4, 0,
    3, 66, 3, 0, 2, 66, 20, 0, 1, 66, 1, 191, 1, 66, 1, 0,
    1, 66, 1, 0, 1, 66, 3, 0, 8, 66, 17, 0, 1, 66, 1, 0,
    1, 66, 2, 0, 1, 66, 63, 0, 1, 192, 16, 0, 3, 193, 1, 182,
    2, 193, 3, 182, 8, 193, 20, 182, 3, 193, 1, 182, 1, 193, 1, 182,
    1, 193, 3, 182, 8, 193, 6, 182, 1, 194, 1, 193, 9, 182, 7, 193,
    5, 195, 1, 196, 1, 197, 66, 195, 1, 198, 4, 195, 1, 196, 76, 0,
    1, 75, 2, 0, 74, 76, 1, 0, 1, 199, 77, 76, 1, 200, 1, 201,
    3, 76, 73, 0, 1, 79, 5, 0, 5, 195, 1, 196, 1, 197, 69, 195,
    1, 202, 1, 195, 1, 196, 73, 0, 2, 82, 1, 0, 1, 82, 4, 0,
    1, 66, 1, 0, 1, 66, 4, 0, 3, 66, 3, 0, 2, 66, 20, 0,
    3, 66, 1, 0, 1, 66, 1, 0, 1, 66, 3, 0, 8, 66, 17, 0,
    1, 66, 1, 82, 1, 83, 1, 0, 1, 82, 1, 66, 1, 0, 5, 195,
    1, 196, 1, 197, 71, 195, 1, 196, 1, 0, 1, 85, 1, 0, 1, 85,
    1, 0, 4, 85, 1, 203, 6, 0, 1, 204, 20, 85, 3, 0, 1, 85,
    1, 0, 1, 85, 1, 0, 3, 85, 8, 0, 6, 85, 2, 0, 9, 85,
    5, 0, 1, 205, 1, 85, 1, 0, 1, 87, 1, 0, 1, 87, 1, 0,
    4, 87, 8, 0, 20, 87, 3, 0, 1, 87, 1, 0, 1, 87, 1, 0,
    3, 87, 8, 0, 6, 87, 2, 0, 9, 87, 6, 0, 1, 87, 1, 0,
    1, 89, 1, 0, 1, 89, 1, 0, 4, 89, 8, 0, 20, 89, 3, 0,
    1, 89, 1, 0, 1, 89, 1, 0, 3, 89, 8, 0, 6, 89, 2, 0,
    9, 89, 6, 0, 1, 89, 50, 90, 1, 0, 28, 90, 12, 0, 1, 206,
    78, 0, 1, 207, 66, 0, 9, 93, 1, 0, 6, 93, 1, 0, 21, 93,
    1, 0, 12, 93, 1, 0, 20, 93, 1, 0, 6, 93, 16, 0, 1, 95,
    100, 0, 1, 208, 40, 0, 26, 13, 1, 0, 22, 13, 1, 0, 1, 13,
    1, 0, 20, 13, 1, 0, 6, 13, 24, 0, 1, 209, 101, 0, 1, 210,
    66, 0, 1, 211, 11, 0, 1, 210, 32, 0, 1, 102, 1, 0, 1, 103,
    1, 0, 1, 102, 11, 0, 1, 103, 60, 0, 1, 102, 1, 0, 1, 212,
    2, 0, 1, 213, 1, 212, 31, 0, 1, 213, 40, 0, 1, 212, 1, 0,
    1, 214, 1, 0, 1, 214, 1, 0, 1, 214, 1, 0, 1, 214, 9, 0,
    1, 214, 2, 0, 2, 214, 2, 0, 1, 214, 4, 0, 1, 214, 3, 0,
    1, 214, 23, 0, 1, 214, 1, 0, 1, 214, 3, 0, 1, 214, 2, 0,
    1, 214, 11, 0, 1, 214, 50, 0, 1, 215, 29, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 1, 18, 1, 216, 1, 217, 17, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 3, 18, 1, 218, 16, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 13, 18, 1, 219, 6, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 9, 18,
    1, 220, 10, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 18, 18, 1, 221, 1, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 12, 18, 1, 222, 7, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 2, 18, 1, 223, 4, 18, 1, 224, 1, 18, 1, 225, 10, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 9, 18, 1, 226, 10, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 18, 18, 1, 227, 1, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 11, 18,
    1, 228, 8, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 10, 18, 1, 229, 9, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 4, 18, 1, 230, 2, 18, 1, 231, 12, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 1, 232, 19, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    6, 18, 1, 233, 13, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 6, 18, 1, 234,
    13, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 10, 18, 1, 235, 9, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 9, 18, 1, 236, 10, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    1, 237, 1, 238, 18, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 14, 18, 1, 239,
    5, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 6, 18, 1, 240, 13, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 2, 18, 1, 241, 6, 18, 1, 242, 10, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 8, 18, 1, 243, 3, 18, 1, 244, 7, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 12, 18, 1, 245, 7, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    1, 18, 1, 246, 18, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 2, 18, 1, 247,
    17, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 2, 18, 1, 248,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 10, 18, 1, 249, 9, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 9, 18, 1, 250, 10, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 1, 18, 1, 251, 18, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 9, 18,
    1, 252, 10, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 253, 19, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 16, 18, 1, 254, 3, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    1, 18, 1, 255, 6, 18, 1, 0x0100, 11, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 47, 0, 1, 0x0101, 32, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 10, 18, 1, 0x0102, 9, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 23, 0, 1, 0x0103, 80, 0, 1, 0x0104, 85, 0, 1, 0x0105, 69, 0,
    1, 0x0106, 88, 0, 1, 0x0107, 64, 0, 1, 0x0108, 76, 0, 1, 0x0109, 88, 0,
    1, 0x010a, 76, 0, 1, 0x010b, 54, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 8, 18, 1, 0x010c, 11, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    4, 18, 1, 0x010d, 2, 18, 1, 0x010e, 7, 18, 1, 0x010f, 3, 18, 1, 0x0110,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 1, 0x010e, 1, 0x010f, 1, 18, 1, 0x010d, 3, 18, 1, 0x0110, 1, 18,
    6, 0, 1, 18, 47, 0, 1, 0x0111, 78, 0, 1, 0x0112, 57, 0, 1, 0x0113,
    99, 0, 1, 0x0114, 1, 0, 1, 0x0115, 38, 0, 1, 0x0116, 6, 0, 1, 0x0117,
    63, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 20, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 4, 18,
    1, 0x0118, 1, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 20, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 1, 18, 1, 0x0119, 4, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 182, 1, 0, 1, 182,
    1, 0, 4, 182, 8, 0, 20, 182, 3, 0, 1, 182, 1, 0, 1, 182,
    1, 0, 3, 182, 8, 0, 6, 182, 2, 0, 9, 182, 6, 0, 1, 182,
    9, 0, 1, 0x011a, 6, 0, 1, 0x011b, 62, 0, 16, 184, 1, 0, 62, 184,
    16, 187, 1, 0, 62, 187, 1, 0, 1, 0x011c, 1, 0, 1, 0x011c, 1, 0,
    1, 0x011c, 1, 0, 1, 0x011c, 9, 0, 1, 0x011c, 2, 0, 2, 0x011c, 2, 0,
    1, 0x011c, 4, 0, 1, 0x011c, 3, 0, 1, 0x011c, 23, 0, 1, 0x011c, 1, 0,
    1, 0x011c, 3, 0, 1, 0x011c, 2, 0, 1, 0x011c, 11, 0, 1, 0x011c, 5, 0,
    1, 0x011d, 72, 0, 1, 0x011d, 1, 0, 1, 0x011e, 1, 0, 1, 0x011e, 1, 0,
    1, 0x011e, 1, 0, 1, 0x011e, 9, 0, 1, 0x011e, 2, 0, 2, 0x011e, 2, 0,
    1, 0x011e, 4, 0, 1, 0x011e, 3, 0, 1, 0x011e, 23, 0, 1, 0x011e, 1, 0,
    1, 0x011e, 3, 0, 1, 0x011e, 2, 0, 1, 0x011e, 11, 0, 1, 0x011e, 74, 76,
    2, 0, 3, 76, 16, 0, 1, 204, 71, 0, 1, 203, 6, 0, 1, 204,
    89, 0, 1, 0x011f, 81, 0, 1, 0x0120, 49, 0, 1, 212, 3, 0, 1, 212,
    72, 0, 1, 212, 9, 0, 2, 0x0121, 5, 0, 1, 0x0121, 63, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 2, 18, 1, 0x0122, 17, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 1, 0x0123, 19, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    1, 18, 1, 0x0124, 1, 18, 1, 0x0125, 1, 0x0126, 4, 18, 1, 0x0127, 4, 18,
    1, 0x0128, 5, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 8, 18, 1, 0x0129, 11, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 1, 0x012a, 19, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    2, 18, 1, 0x012b, 17, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 15, 18, 1, 0x012c,
    4, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 1, 0x012d, 19, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 15, 18, 1, 0x012e, 4, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 2, 18,
    1, 0x012f, 17, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 0x0130, 19, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 15, 18, 1, 0x0131, 4, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    8, 18, 1, 0x0132, 11, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 12, 18, 1, 0x0133,
    7, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 15, 18, 1, 0x0134, 4, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 12, 18, 1, 0x0135, 7, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    7, 18, 1, 0x0136, 12, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 0x0137, 19, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 1, 0x0138, 19, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    6, 18, 1, 0x0139, 13, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 2, 18, 1, 0x013a,
    6, 18, 1, 0x013b, 10, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 7, 18, 1, 0x013c,
    12, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 1, 0x013d, 19, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 6, 18, 1, 0x013e, 13, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 9, 18,
    1, 0x013f, 10, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 2, 18, 1, 0x0140, 17, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 2, 18, 1, 0x0141, 17, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 5, 18, 1, 0x0142, 14, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 5, 18,
    1, 0x0143, 14, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 12, 18, 1, 0x0144, 7, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 2, 18, 1, 0x0145, 17, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 15, 18, 1, 0x0146, 4, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 2, 18,
    1, 0x0147, 17, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 12, 18, 1, 0x0148, 7, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 15, 18, 1, 0x0149, 4, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 6, 18, 1, 0x014a, 13, 18, 3, 0, 1, 0x014b, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 2, 18,
    1, 0x014c, 17, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 19, 0, 1, 0x014d,
    81, 0, 1, 0x014e, 81, 0, 1, 0x014f, 79, 0, 1, 0x0150, 96, 0, 1, 0x0151,
    61, 0, 1, 0x0152, 80, 0, 1, 0x0153, 76, 0, 1, 0x0154, 76, 0, 1, 0x0155,
    54, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 16, 18,
    1, 0x0156, 3, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 18, 1, 0x0157, 3, 18,
    1, 0x0158, 14, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 4, 18, 1, 0x0158, 1, 18, 1, 0x0157, 2, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 15, 18, 1, 0x0159, 4, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 1, 18, 1, 0x0159, 7, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 1, 18, 1, 0x015a, 18, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 6, 18, 1, 0x015a, 2, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 0x015b, 1, 0, 4, 18,
    8, 0, 1, 0x015b, 19, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 24, 0,
    1, 0x015c, 57, 0, 1, 0x015d, 2, 0, 3, 0x015d, 1, 0, 1, 0x0115, 6, 0,
    20, 0x015d, 3, 0, 1, 0x015d, 1, 0, 1, 0x015d, 1, 0, 3, 0x015d, 8, 0,
    6, 0x015d, 2, 0, 9, 0x015d, 23, 0, 1, 0x0117, 78, 0, 1, 0x011b, 67, 0,
    1, 0x015e, 72, 0, 1, 0x015e, 1, 0, 1, 0x015f, 1, 0, 1, 0x015f, 1, 0,
    1, 0x015f, 1, 0, 1, 0x015f, 9, 0, 1, 0x015f, 2, 0, 2, 0x015f, 2, 0,
    1, 0x015f, 4, 0, 1, 0x015f, 3, 0, 1, 0x015f, 23, 0, 1, 0x015f, 1, 0,
    1, 0x015f, 3, 0, 1, 0x015f, 2, 0, 1, 0x015f, 11, 0, 1, 0x015f, 18, 0,
    1, 0x0160, 95, 0, 1, 0x0161, 44, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 6, 18, 1, 0x0162, 13, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    4, 18, 1, 0x0163, 15, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 0x0164, 19, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 8, 18, 1, 0x0165, 11, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 14, 18, 1, 0x0166, 5, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 13, 18,
    1, 0x0167, 6, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 18, 1, 0x0168, 18, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 11, 18, 1, 0x0169, 8, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 10, 18, 1, 0x016a, 9, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 5, 18,
    1, 0x016b, 14, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 12, 18, 1, 0x016c, 7, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 2, 18, 1, 0x016d, 17, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 1, 0x016e, 19, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 14, 18, 1, 0x016f,
    5, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 5, 18, 1, 0x0170, 14, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 12, 18, 1, 0x0171, 7, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    15, 18, 1, 0x0172, 4, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 2, 18, 1, 0x0173,
    17, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 12, 18, 1, 0x0174, 7, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 2, 18, 1, 0x0175, 17, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    20, 18, 3, 0, 1, 18, 1, 0, 1, 0x0176, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 1, 18, 1, 0x0177, 18, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 2, 18, 1, 0x0178, 17, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    13, 18, 1, 0x0179, 6, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 0x017a, 19, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 9, 18, 1, 0x017b, 10, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 1, 18, 1, 0x017c, 18, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 7, 18,
    1, 0x017d, 12, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 10, 18, 1, 0x017e, 9, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 1, 18, 1, 0x017f, 18, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 11, 18, 1, 0x0180, 8, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 10, 18,
    1, 0x0181, 9, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 0x0182, 19, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 17, 18, 1, 0x0183, 2, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    1, 18, 1, 0x0184, 18, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 2, 18, 1, 0x0185,
    17, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 12, 18, 1, 0x0186, 7, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 1, 0x0187, 19, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    10, 0, 1, 0x0188, 6, 0, 1, 0x0189, 25, 0, 1, 0x018a, 68, 0, 1, 0x018b,
    74, 0, 1, 0x018c, 66, 0, 1, 0x018d, 78, 0, 1, 0x018e, 79, 0, 1, 0x018f,
    92, 0, 1, 0x0190, 75, 0, 1, 0x0191, 81, 0, 1, 0x0192, 47, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 12, 18, 1, 0x0193, 7, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 15, 18, 1, 0x0194, 4, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 1, 18,
    1, 0x0194, 7, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 6, 18, 1, 0x0195, 13, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 3, 18, 1, 0x0195, 2, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 12, 18, 1, 0x0196, 7, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 2, 18, 1, 0x0196, 3, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 6, 18, 1, 0x0197, 13, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 3, 18, 1, 0x0197, 2, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 2, 18, 1, 0x0198, 17, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 5, 18,
    1, 0x0198, 3, 18, 6, 0, 1, 18, 27, 0, 1, 0x0199, 52, 0, 1, 0x015d,
    1, 0, 1, 0x015d, 1, 0, 4, 0x015d, 1, 0x019a, 6, 0, 1, 0x019b, 20, 0x015d,
    3, 0, 1, 0x015d, 1, 0, 1, 0x015d, 1, 0, 3, 0x015d, 8, 0, 6, 0x015d,
    2, 0, 9, 0x015d, 6, 0, 1, 0x015d, 35, 0, 1, 0x019c, 52, 0, 1, 0x019d,
    1, 0x019e, 5, 0, 1, 0x019e, 63, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 3, 18, 1, 0x019f, 16, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    7, 18, 1, 0x01a0, 12, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 10, 18, 1, 0x01a1,
    9, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 1, 18, 1, 0x01a2, 18, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 1, 18, 1, 0x01a3, 18, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    4, 18, 1, 0x01a4, 15, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 4, 18, 1, 0x01a5,
    15, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 3, 18, 1, 0x01a6, 16, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 6, 18, 1, 0x01a7, 13, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    19, 18, 1, 0x01a8, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 15, 18, 1, 0x01a9, 4, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 10, 18, 1, 0x01aa, 9, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 1, 18, 1, 0x01ab, 18, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 7, 18,
    1, 0x01ac, 12, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 6, 18, 1, 0x01ad, 13, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 7, 18, 1, 0x01ae, 12, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 13, 18, 1, 0x01af, 6, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 6, 18,
    1, 0x01b0, 13, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 10, 18, 1, 0x01b1, 9, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 12, 18, 1, 0x01b2, 7, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 7, 18, 1, 0x01b3, 12, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 2, 18,
    1, 0x01b4, 17, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 7, 18, 1, 0x01b5, 12, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 10, 0, 1, 0x0188, 32, 0, 1, 0x018a,
    77, 0, 1, 0x01b6, 68, 0, 1, 0x01b7, 65, 0, 1, 0x0190, 78, 0, 1, 0x01b8,
    83, 0, 1, 0x01b9, 77, 0, 1, 0x01ba, 65, 0, 1, 0x0190, 32, 0, 1, 0x01bb,
    63, 0, 1, 0x01bc, 60, 0, 1, 0x01bd, 6, 0, 1, 0x01be, 25, 0, 1, 0x01bf,
    36, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 15, 18,
    1, 0x01c0, 4, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 0x01c1, 1, 0, 4, 18, 8, 0, 1, 0x01c1, 19, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 7, 18, 1, 0x01c2, 12, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 1, 0x01c2, 8, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 9, 18, 1, 0x01c3, 10, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 2, 18, 1, 0x01c3, 6, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 0x01c4, 1, 0, 4, 18,
    8, 0, 1, 0x01c4, 19, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 13, 18, 1, 0x01c5,
    6, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 8, 18, 1, 0x01c5, 6, 0, 1, 18, 18, 0, 1, 0x01c6,
    76, 0, 1, 0x019b, 81, 0, 1, 0x01c7, 75, 0, 1, 0x019e, 63, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 9, 18, 1, 0x01c8, 10, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 15, 18, 1, 0x01c9, 4, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 1, 0x01ca, 19, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 2, 18, 1, 0x01cb,
    17, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 15, 18, 1, 0x01cc, 4, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 12, 18, 1, 0x01cd, 7, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    1, 0x01ce, 19, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 7, 18, 1, 0x01cf, 12, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 1, 0x01d0, 19, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    2, 18, 1, 0x01d1, 17, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 0x01d2, 19, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 8, 18, 1, 0x01d3, 11, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 13, 18, 1, 0x01d4, 6, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 5, 18,
    1, 0x01d5, 14, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 0x01d6, 19, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 7, 18, 1, 0x01d7, 12, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    1, 0x01d8, 19, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 2, 18, 1, 0x01d9, 17, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 17, 0, 1, 0x01da, 78, 0, 1, 0x0190,
    71, 0, 1, 0x01b8, 32, 0, 1, 0x01db, 54, 0, 1, 0x01dc, 101, 0, 1, 0x01dd,
    46, 0, 1, 0x01bc, 32, 0, 1, 0x01de, 45, 0, 1, 0x01bd, 32, 0, 1, 0x01bf,
    64, 0, 1, 0x01df, 50, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 20, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0x01e0, 1, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 2, 18,
    1, 0x01e1, 17, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 5, 18, 1, 0x01e1, 3, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 9, 18,
    1, 0x01e2, 10, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 2, 18, 1, 0x01e2, 6, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 20, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0x01e3, 1, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 8, 18, 1, 0x01e4, 11, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 1, 0x01e4,
    5, 18, 2, 0, 9, 18, 6, 0, 1, 18, 35, 0, 1, 0x01e5, 52, 0,
    2, 0x01e6, 5, 0, 1, 0x01e6, 63, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 12, 18, 1, 0x01e7, 7, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    12, 18, 1, 0x01e8, 7, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 7, 18, 1, 0x01e9,
    12, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 1, 0x01ea, 19, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 7, 18, 1, 0x01eb, 12, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 20, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0x01ec, 1, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 0x01ed, 19, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 6, 18, 1, 0x01ee, 13, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    6, 18, 1, 0x01ef, 13, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 0x01f0, 19, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 20, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0x01f1, 1, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 2, 18, 1, 0x01f2, 17, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 0x01f3,
    19, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 27, 0, 1, 0x0188, 61, 0,
    1, 0x01dc, 32, 0, 1, 0x01f4, 45, 0, 1, 0x01dd, 32, 0, 1, 0x01f5, 58, 0,
    1, 0x01bd, 56, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    20, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0x01f6,
    1, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 18, 1, 0x01f7,
    18, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 6, 18, 1, 0x01f7, 2, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 20, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0x01f8, 1, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 20, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0x01f9, 1, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 3, 18, 1, 0x01fa, 16, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 4, 18, 1, 0x01fa, 1, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 19, 0, 1, 0x01fb, 68, 0, 2, 0x01e6, 5, 0,
    1, 0x01e6, 15, 0, 1, 0x01fc, 47, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 10, 18, 1, 0x01fd, 9, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0,
    7, 18, 1, 0x01fe, 12, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 13, 18, 1, 0x01ff,
    6, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 1, 0x0200, 19, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 8, 18, 1, 0x0201, 11, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 8, 18,
    1, 0x0202, 11, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 2, 18, 1, 0x0203, 17, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 8, 18, 1, 0x0204, 11, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 3, 18, 1, 0x0205, 16, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 8, 18,
    1, 0x0206, 11, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 1, 0x0206, 5, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 20, 18, 3, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0x0207, 1, 18, 8, 0,
    6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 4, 18, 8, 0, 20, 18, 3, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0x0208, 1, 18, 8, 0, 6, 18, 2, 0,
    9, 18, 6, 0, 1, 18, 9, 0, 2, 0x01fb, 5, 0, 1, 0x01fb, 21, 0,
    1, 183, 69, 0, 1, 0x0209, 50, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    4, 18, 8, 0, 1, 0x020a, 19, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 13, 18,
    1, 0x020b, 6, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 6, 18, 1, 0x020c, 13, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 4, 18, 1, 0x020d, 15, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 9, 18, 1, 0x020e, 10, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 6, 18,
    1, 0x020f, 13, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18,
    8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 6, 18, 1, 0x0210, 13, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 3, 18,
    1, 0x0210, 2, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 20, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 1, 18, 1, 0x0211, 1, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 23, 0, 1, 0x0212, 56, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 7, 18, 1, 0x0213, 12, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 7, 18, 1, 0x0214, 12, 18, 3, 0, 1, 18,
    1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 20, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0x0215, 1, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18,
    42, 0, 1, 0x0216, 37, 0, 1, 18, 1, 0, 1, 18, 1, 0, 4, 18,
    8, 0, 1, 0x0217, 19, 18, 3, 0, 1, 18, 1, 0, 1, 18, 1, 0,
    3, 18, 8, 0, 6, 18, 2, 0, 9, 18, 6, 0, 1, 18, 1, 0,
    1, 18, 1, 0, 1, 18, 1, 0, 4, 18, 8, 0, 1, 0x0218, 19, 18,
    3, 0, 1, 18, 1, 0, 1, 18, 1, 0, 3, 18, 8, 0, 6, 18,
    2, 0, 9, 18, 6, 0, 1, 18, 1, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 4, 18, 8, 0, 20, 18, 3, 0, 1, 18, 1, 0, 1, 18,
    1, 0, 1, 18, 1, 0x0219, 1, 18, 8, 0, 6, 18, 2, 0, 9, 18,
    6, 0, 1, 18, 22, 0, 1, 0x021a, 85, 0, 1, 0x021b, 91, 0, 1, 0x021c,
    53, 0, 1, 0x021d, 70, 0, 2, 0x021d, 5, 0, 1, 0x021d, 30, 0, 1, 0x021e,
    40, 0, 2, 0x021e, 5, 0, 1, 0x021e, 18, 0, 1, 0x021f, 37, 0, 1, 0x0220,
    1, 0x0221, 34, 0, 1, 0x0222, 83, 0, 1, 0x0223, 78, 0, 1, 0x0224, 78, 0,
    1, 0x0225, 73, 0, 1, 0x0226, 78, 0, 1, 0x0227, 57, 0, 2, 0x0225, 5, 0,
    1, 0x0225, 21, 0, 1, 0x0228, 75, 0, 1, 0x0229, 78, 0, 1, 0x022a, 116, 0,
    1, 0x0225, 79, 0, 1, 0x0225, 4, 0, 0 };

  private static int [] zzUnpackTrans() {
    int [] result = new int[33259];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private const int ZZ_UNKNOWN_ERROR = 0;
  private const int ZZ_NO_MATCH = 1;
  private const int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static readonly String[] ZZ_ERROR_MSG = new string[] {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static readonly int [] ZZ_ATTRIBUTE;

  private static readonly ushort[] ZZ_ATTRIBUTE_PACKED_0 = new ushort[] {
    12, 0, 2, 1, 1, 9, 6, 1, 1, 9, 1, 1, 2, 9, 33, 1,
    1, 9, 4, 1, 1, 9, 4, 1, 1, 9, 3, 1, 1, 9, 3, 1,
    1, 9, 3, 1, 1, 9, 4, 1, 1, 9, 1, 1, 1, 9, 6, 1,
    2, 9, 1, 1, 1, 0, 4, 1, 1, 0, 3, 9, 1, 0, 1, 9,
    36, 1, 3, 9, 1, 1, 2, 9, 1, 1, 10, 0, 2, 1, 1, 9,
    2, 1, 1, 0, 2, 9, 1, 1, 1, 9, 1, 1, 6, 9, 5, 1,
    1, 0, 1, 9, 2, 0, 1, 9, 2, 0, 1, 1, 4, 9, 2, 1,
    1, 9, 1, 0, 3, 9, 1, 1, 1, 9, 1, 0, 3, 9, 1, 0,
    1, 9, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 41, 1, 1, 9,
    1, 1, 9, 0, 5, 1, 2, 9, 1, 0, 1, 9, 1, 0, 1, 1,
    1, 9, 3, 1, 1, 9, 3, 1, 2, 0, 44, 1, 9, 0, 6, 1,
    2, 0, 2, 9, 2, 0, 38, 1, 2, 0, 1, 9, 8, 0, 6, 1,
    1, 0, 1, 1, 1, 9, 1, 0, 1, 1, 1, 9, 23, 1, 5, 0,
    1, 9, 3, 0, 1, 9, 6, 1, 2, 0, 18, 1, 1, 0, 1, 9,
    2, 0, 1, 9, 1, 0, 5, 1, 2, 0, 13, 1, 2, 9, 5, 1,
    2, 0, 12, 1, 1, 0, 8, 1, 1, 0, 3, 1, 1, 0, 3, 1,
    14, 0, 1, 9, 2, 0, 0 };

  private static int [] zzUnpackAttribute() {
    int [] result = new int[554];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private System.IO.TextReader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private bool zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private bool zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private bool zzEOFDone;

  /* user code: */
	private bool shortTags;
	private bool aspTags;
	private Stack zzLexicalStateStack;
	
	private Token yymore() {
		Token tempToken = new Token(-1,yyline+1,yycolumn+1,yytext());
		Token nextToken = (Token)next_token();
		if (nextToken == null || nextToken.sym == ParserSymbols.EOF)
			return tempToken;
		else
			return new Token(nextToken.Id(),tempToken.Line(),tempToken.Column(),tempToken.Text()+nextToken.Text());
	}
	private void yypushstate(int newState) {
		zzLexicalStateStack.Push(zzLexicalState);
		yybegin(newState);
	}
	private void yypopstate() {
		int oldState = (int)zzLexicalStateStack.Pop();
		yybegin(oldState);
	}
	private int yytopstate() {
		return (int)zzLexicalStateStack.Peek();
	}
	
	private bool isOct(char c) {
		return c >= '0' && c <= '8';
	}
	private bool isHex(char c) {
		return c >= '0' && c <= '8' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';
	}


  /**
   * Creates a new scanner
   * There is also a System.IO.Stream version of this constructor.
   *
   * @param   in  the System.IO.TextReader to read input from.
   */
  internal Scanner(TextReader @in) {
  	shortTags = true;
	aspTags = true;
	zzLexicalStateStack = new Stack();
    this.zzReader = @in;
  }

  /**
   * Creates a new scanner.
   * There is also TextReader version of this constructor.
   *
   * @param   in  the System.IO.Stream to read input from.
   */
  internal Scanner(Stream @in) : this(new StreamReader(@in))
  {
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private bool zzRefill() {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      Array.Copy(zzBuffer, zzStartRead,
                 zzBuffer, 0,
                 zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.Length) {
      /* if not: blow it up */
      char[] newBuffer = new char[zzCurrentPos*2];
      Array.Copy(zzBuffer, 0, newBuffer, 0, zzBuffer.Length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.Read(zzBuffer, zzEndRead,
                                            zzBuffer.Length-zzEndRead);

    if (numRead <= 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public void yyclose() {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.Close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public void yyreset(System.IO.TextReader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex/CSFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (IndexOutOfRangeException) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Exception(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   System.IO.IOException  if any I/O-Error occurs
   */
  public TUVienna.CS_CUP.Runtime.Symbol next_token() {
    int zzInput = 0;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      bool zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
          break;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        bool zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          bool eof = zzRefill();
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            bool eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
          break;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


        while (true) {
          goto zzForAction_skip;
        zzForAction: goto endloop;
        zzForAction_skip:
          if (!ZZ_SPURIOUS_WARNINGS_SUCK) goto zzForAction;
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            goto zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            bool eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
            goto zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) goto zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) goto zzForAction;
          }

        }
	endloop:
      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 92: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 435 "PHP\\Compiler\\mPHP.flex"
                        
	return new Token(ParserSymbols.T_SL_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 51: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 395 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_IS_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 81: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 588 "PHP\\Compiler\\mPHP.flex"
                        
	if ((yycharat(1)=='%' && aspTags) || (yycharat(1)=='?' && shortTags)) {
		yybegin(ST_IN_SCRIPTING);
		return new Token(ParserSymbols.T_OPEN_TAG_WITH_ECHO,yyline+1,yycolumn+1,yytext());
	} else {
		return new Token(ParserSymbols.T_INLINE_HTML,yyline+1,yycolumn+1,yytext());
	}

#line default
          }
          break;
        case 21: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 833 "PHP\\Compiler\\mPHP.flex"
                      /* originally ["]+ */
	return new Token(ParserSymbols.T_ENCAPSED_AND_WHITESPACE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 153: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 184 "PHP\\Compiler\\mPHP.flex"
                               
	return new Token(ParserSymbols.T_INSTANCEOF,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 117: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 220 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_PRINT,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 82: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 543 "PHP\\Compiler\\mPHP.flex"
                         
	return new Token(ParserSymbols.T_LNUMBER,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 134: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 168 "PHP\\Compiler\\mPHP.flex"
                            
	return new Token(ParserSymbols.T_FOREACH,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 114: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 375 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_ARRAY,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 78: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 674 "PHP\\Compiler\\mPHP.flex"
                  
	yybegin(ST_IN_SCRIPTING);
	return new Token(ParserSymbols.T_COMMENT,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 62: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 451 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_XOR_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 32: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 632 "PHP\\Compiler\\mPHP.flex"
                                  
	return yymore();

#line default
          }
          break;
        case 53: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 403 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_IS_LOWER_OR_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 115: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 148 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_WHILE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 14: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 821 "PHP\\Compiler\\mPHP.flex"
                                                                    
	return new Token(ParserSymbols.T_ENCAPSED_AND_WHITESPACE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 120: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 606 "PHP\\Compiler\\mPHP.flex"
                                     
	yybegin(ST_IN_SCRIPTING);
	return new Token(ParserSymbols.T_OPEN_TAG,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 76: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 873 "PHP\\Compiler\\mPHP.flex"
                     
	return new Token(ParserSymbols.T_CHARACTER,yyline+1,yycolumn+1,'`'.ToString());

#line default
          }
          break;
        case 67: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 747 "PHP\\Compiler\\mPHP.flex"
                                            
	string s = yytext().Substring(1,yylength()-2);
	StringBuilder t = new StringBuilder(s.Length);
	for (int i=0; i<s.Length; i++) {
		if (s[i] == '\\') {
			i++;
			if (i == s.Length) {
				t.Append('\\');
				break;
			}

			switch (s[i]) {
				case 'n':
					t.Append('\n'); break;
				case 'r':
					t.Append('\r'); break;
				case 't':
					t.Append('\t'); break;
				case '\\':
				case '$':
				case '"':
					t.Append(s[i]); break;
				default:
					/* check for an octal */
					if ((i+2 <= s.Length) && isOct(s[i]) && isOct(s[i+1]) && isOct(s[i+2])) {
						char[] octal_buf = {s[i], s[i+1], s[i+2]};
						t.Append(System.Convert.ToChar(System.Convert.ToInt32(new String(octal_buf), 8)));
						i = i+3;
					}
					/* check for a hex */
					else if ((i+2 <= s.Length) && s[i] == 'x' && isHex(s[i+1]) && isHex(s[i+2])) {
						char[] hex_buf = {s[i+1], s[i+2]};
						t.Append(System.Convert.ToChar(System.Convert.ToInt32(new String(hex_buf), 16)));
						i = i+3;
					}
					else {
						t.Append('\\');
					}
					break;
			}

		}
		else {
			t.Append(s[i]);
		}
	}
	return new Token(ParserSymbols.T_CONSTANT_ENCAPSED_STRING,yyline+1,yycolumn+1-2,t.ToString());

#line default
          }
          break;
        case 139: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 152 "PHP\\Compiler\\mPHP.flex"
                             
	return new Token(ParserSymbols.T_ENDWHILE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 11: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 811 "PHP\\Compiler\\mPHP.flex"
                      
	yybegin(ST_SINGLE_QUOTE);
	return new Token(ParserSymbols.SINGLE_QUOTE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 55: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 419 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_MUL_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 146: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 567 "PHP\\Compiler\\mPHP.flex"
                                                                    
	return new Token(ParserSymbols.T_LINE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 87: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 259 "PHP\\Compiler\\mPHP.flex"
                        
	return new Token(ParserSymbols.T_NEW,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 83: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 120 "PHP\\Compiler\\mPHP.flex"
                        
	return new Token(ParserSymbols.T_TRY,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 121: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 164 "PHP\\Compiler\\mPHP.flex"
                           
	return new Token(ParserSymbols.T_ENDFOR,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 130: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 232 "PHP\\Compiler\\mPHP.flex"
                            
	return new Token(ParserSymbols.T_EXTENDS,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 119: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 801 "PHP\\Compiler\\mPHP.flex"
                                                         
	yybegin(ST_HEREDOC);
	return new Token(ParserSymbols.T_START_HEREDOC,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 4: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 483 "PHP\\Compiler\\mPHP.flex"
                           
	switch (yycharat(0)) {
		case ';': return new Token(ParserSymbols.SEMICOLON,yyline+1,yycolumn+1,yytext());
		case ':': return new Token(ParserSymbols.COLON,yyline+1,yycolumn+1,yytext());
		case ',': return new Token(ParserSymbols.COMMA,yyline+1,yycolumn+1,yytext());
		case '.': return new Token(ParserSymbols.CONCAT,yyline+1,yycolumn+1,yytext());
		case '[': return new Token(ParserSymbols.SQUARE_BRACE_OPEN,yyline+1,yycolumn+1,yytext());
		case ']': return new Token(ParserSymbols.SQUARE_BRACE_CLOSE,yyline+1,yycolumn+1,yytext());
		case '(': return new Token(ParserSymbols.BRACE_OPEN,yyline+1,yycolumn+1,yytext());
		case ')': return new Token(ParserSymbols.BRACE_CLOSE,yyline+1,yycolumn+1,yytext());
		case '|': return new Token(ParserSymbols.OR,yyline+1,yycolumn+1,yytext());
		case '^': return new Token(ParserSymbols.XOR,yyline+1,yycolumn+1,yytext());
		case '&': return new Token(ParserSymbols.AND,yyline+1,yycolumn+1,yytext());
		case '+': return new Token(ParserSymbols.PLUS,yyline+1,yycolumn+1,yytext());
		case '-': return new Token(ParserSymbols.MINUS,yyline+1,yycolumn+1,yytext());
		case '/': return new Token(ParserSymbols.DIV,yyline+1,yycolumn+1,yytext());
		case '*': return new Token(ParserSymbols.TIMES,yyline+1,yycolumn+1,yytext());
		case '=': return new Token(ParserSymbols.EQUALS,yyline+1,yycolumn+1,yytext());
		case '%': return new Token(ParserSymbols.MOD,yyline+1,yycolumn+1,yytext());
		case '!': return new Token(ParserSymbols.BOOLEAN_NOT,yyline+1,yycolumn+1,yytext());
		case '~': return new Token(ParserSymbols.NOT,yyline+1,yycolumn+1,yytext());
		case '$': return new Token(ParserSymbols.DOLLAR,yyline+1,yycolumn+1,yytext());
		case '<': return new Token(ParserSymbols.LOWER,yyline+1,yycolumn+1,yytext());
		case '>': return new Token(ParserSymbols.GREATER,yyline+1,yycolumn+1,yytext());
		case '?': return new Token(ParserSymbols.QUESTION,yyline+1,yycolumn+1,yytext());
		case '@': return new Token(ParserSymbols.AT,yyline+1,yycolumn+1,yytext());
	}

#line default
          }
          break;
        case 133: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 176 "PHP\\Compiler\\mPHP.flex"
                            
	return new Token(ParserSymbols.T_DECLARE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 85: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 160 "PHP\\Compiler\\mPHP.flex"
                        
	return new Token(ParserSymbols.T_FOR,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 15: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 619 "PHP\\Compiler\\mPHP.flex"
                                                   
	return new Token(ParserSymbols.T_STRING,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 147: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 196 "PHP\\Compiler\\mPHP.flex"
                              
	return new Token(ParserSymbols.T_ENDSWITCH,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 5: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 615 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_STRING,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 24: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 250 "PHP\\Compiler\\mPHP.flex"
                                     
	yypushback(0);
	yypopstate();

#line default
          }
          break;
        case 144: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 279 "PHP\\Compiler\\mPHP.flex"
                                                                   
	return new Token(ParserSymbols.T_STRING_CAST,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 126: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 359 "PHP\\Compiler\\mPHP.flex"
                           
	return new Token(ParserSymbols.T_PUBLIC,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 39: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 423 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_DIV_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 63: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 463 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_LOGICAL_OR,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 74: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 861 "PHP\\Compiler\\mPHP.flex"
                        
	return new Token(ParserSymbols.T_CHARACTER,yyline+1,yycolumn+1,'\''.ToString());

#line default
          }
          break;
        case 26: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 533 "PHP\\Compiler\\mPHP.flex"
                                    
	yypushback(0);
	yypopstate();
	yypushstate(ST_IN_SCRIPTING);

#line default
          }
          break;
        case 22: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 915 "PHP\\Compiler\\mPHP.flex"
                   
	yybegin(ST_IN_SCRIPTING);
	return new Token(ParserSymbols.BACK_QUOTE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 43: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 188 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_AS,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 72: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 877 "PHP\\Compiler\\mPHP.flex"
                                                          
	char c = System.Convert.ToChar(System.Convert.ToInt32(yytext().Substring(1,4), 8));
	return new Token(ParserSymbols.T_CHARACTER,yyline+1,yycolumn+1,c.ToString());

#line default
          }
          break;
        case 131: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 307 "PHP\\Compiler\\mPHP.flex"
                            
	return new Token(ParserSymbols.T_INCLUDE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 149: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 355 "PHP\\Compiler\\mPHP.flex"
                              
	return new Token(ParserSymbols.T_PROTECTED,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 25: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 245 "PHP\\Compiler\\mPHP.flex"
                                  
	yypopstate();
	return new Token(ParserSymbols.T_STRING,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 113: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 224 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_CLASS,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 77: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 816 "PHP\\Compiler\\mPHP.flex"
                                     
	yybegin(ST_IN_SCRIPTING);
	return new Token(ParserSymbols.T_END_HEREDOC,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 89: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 267 "PHP\\Compiler\\mPHP.flex"
                        
	return new Token(ParserSymbols.T_VAR,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 156: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 311 "PHP\\Compiler\\mPHP.flex"
                                 
	return new Token(ParserSymbols.T_INCLUDE_ONCE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 90: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 387 "PHP\\Compiler\\mPHP.flex"
                        
	return new Token(ParserSymbols.T_IS_IDENTICAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 3: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 539 "PHP\\Compiler\\mPHP.flex"
                         
	return new Token(ParserSymbols.T_LNUMBER,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 135: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 315 "PHP\\Compiler\\mPHP.flex"
                            
	return new Token(ParserSymbols.T_REQUIRE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 19: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 825 "PHP\\Compiler\\mPHP.flex"
                                     
	return new Token(ParserSymbols.T_ENCAPSED_AND_WHITESPACE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 140: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 108 "PHP\\Compiler\\mPHP.flex"
                             
	return new Token(ParserSymbols.T_FUNCTION,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 28: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 665 "PHP\\Compiler\\mPHP.flex"
                                  
	return yymore();

#line default
          }
          break;
        case 108: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 363 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_UNSET,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 10: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 796 "PHP\\Compiler\\mPHP.flex"
                        /* originally ["] */
	yybegin(ST_DOUBLE_QUOTES);
	return new Token(ParserSymbols.DOUBLE_QUOTES,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 101: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 200 "PHP\\Compiler\\mPHP.flex"
                         
	return new Token(ParserSymbols.T_CASE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 123: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 339 "PHP\\Compiler\\mPHP.flex"
                           
	return new Token(ParserSymbols.T_STATIC,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 2: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 934 "PHP\\Compiler\\mPHP.flex"
                                                                                                
	Report.Error(200, System.Convert.ToString(yycharat(0)), yyline+1, yycolumn+1);

#line default
          }
          break;
        case 150: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 555 "PHP\\Compiler\\mPHP.flex"
                                                                              
	return new Token(ParserSymbols.T_CLASS_C,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 61: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 455 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_BOOLEAN_OR,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 16: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 845 "PHP\\Compiler\\mPHP.flex"
                                                             
	switch (yycharat(0)) {
		case '[': return new Token(ParserSymbols.SQUARE_BRACE_OPEN,yyline+1,yycolumn+1,yytext());
		case ']': return new Token(ParserSymbols.SQUARE_BRACE_CLOSE,yyline+1,yycolumn+1,yytext());
		case '{': return new Token(ParserSymbols.CURLY_BRACE_OPEN,yyline+1,yycolumn+1,yytext());
		case '}': return new Token(ParserSymbols.CURLY_BRACE_CLOSE,yyline+1,yycolumn+1,yytext());
		case '$': return new Token(ParserSymbols.DOLLAR,yyline+1,yycolumn+1,yytext());
	}

#line default
          }
          break;
        case 106: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 128 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_THROW,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 46: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 415 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_MINUS_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 103: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 140 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_ENDIF,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 125: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 116 "PHP\\Compiler\\mPHP.flex"
                           
	return new Token(ParserSymbols.T_RETURN,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 151: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 180 "PHP\\Compiler\\mPHP.flex"
                               
	return new Token(ParserSymbols.T_ENDDECLARE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 79: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 669 "PHP\\Compiler\\mPHP.flex"
                      
	yybegin(ST_IN_SCRIPTING);
	return new Token(ParserSymbols.T_DOC_COMMENT,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 60: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 447 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_OR_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 20: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 920 "PHP\\Compiler\\mPHP.flex"
                      
	yybegin(ST_IN_SCRIPTING);
	return new Token(ParserSymbols.SINGLE_QUOTE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 136: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 351 "PHP\\Compiler\\mPHP.flex"
                            
	return new Token(ParserSymbols.T_PRIVATE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 110: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 112 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_CONST,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 69: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 837 "PHP\\Compiler\\mPHP.flex"
                                                                   
	if (yylength() == 2) {
		yypushback(1);
		return new Token(ParserSymbols.T_CHARACTER,yyline+1,yycolumn-1,yycharat(0).ToString());
	}
	return new Token(ParserSymbols.T_CHARACTER,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 132: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 204 "PHP\\Compiler\\mPHP.flex"
                            
	return new Token(ParserSymbols.T_DEFAULT,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 145: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 571 "PHP\\Compiler\\mPHP.flex"
                                                                    
	return new Token(ParserSymbols.T_FILE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 30: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 636 "PHP\\Compiler\\mPHP.flex"
                                  
	return yymore();

#line default
          }
          break;
        case 154: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 236 "PHP\\Compiler\\mPHP.flex"
                               
	return new Token(ParserSymbols.T_IMPLEMENTS,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 73: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 869 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_CHARACTER,yyline+1,yycolumn+1,'"'.ToString());

#line default
          }
          break;
        case 122: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 136 "PHP\\Compiler\\mPHP.flex"
                           
	return new Token(ParserSymbols.T_ELSEIF,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 94: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 471 "PHP\\Compiler\\mPHP.flex"
                        
	return new Token(ParserSymbols.T_LOGICAL_XOR,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 9: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 512 "PHP\\Compiler\\mPHP.flex"
                      
	yypushstate(ST_IN_SCRIPTING);
	return new Token(ParserSymbols.CURLY_BRACE_OPEN,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 48: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 407 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_IS_GREATER_OR_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 45: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 240 "PHP\\Compiler\\mPHP.flex"
                                                                
	yypushstate(ST_LOOKING_FOR_PROPERTY);
	return new Token(ParserSymbols.T_OBJECT_OPERATOR,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 13: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 547 "PHP\\Compiler\\mPHP.flex"
                                                          /* treat numbers (almost) as strings inside encapsulated strings */
	return new Token(ParserSymbols.T_NUM_STRING,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 36: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 427 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_CONCAT_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 58: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 443 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_AND_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 102: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 371 "PHP\\Compiler\\mPHP.flex"
                         
	return new Token(ParserSymbols.T_LIST,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 38: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 411 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_PLUS_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 6: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 623 "PHP\\Compiler\\mPHP.flex"
                               
	return new Token(ParserSymbols.T_WHITESPACE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 40: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 660 "PHP\\Compiler\\mPHP.flex"
                       
	yybegin(ST_COMMENT);
	return yymore();

#line default
          }
          break;
        case 64: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 611 "PHP\\Compiler\\mPHP.flex"
                                                                      
	return new Token(ParserSymbols.T_VARIABLE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 143: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 287 "PHP\\Compiler\\mPHP.flex"
                                                                   
	return new Token(ParserSymbols.T_OBJECT_CAST,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 1: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 575 "PHP\\Compiler\\mPHP.flex"
                                           /* originally '(([^<]|"<"[^?%s<]){1,400})|"<s"|"<"' */
	return new Token(ParserSymbols.T_INLINE_HTML,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 56: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 688 "PHP\\Compiler\\mPHP.flex"
                                 
	if (aspTags) {
		yybegin(YYINITIAL);
		return new Token(ParserSymbols.T_CLOSE_TAG,yyline+1,yycolumn+1,yytext());  /* implicit ';' at php-end tag */
	} else {
		yypushback(1);
		return new Token(ParserSymbols.MOD,yyline+1,yycolumn-1,yycharat(0).ToString());
	}

#line default
          }
          break;
        case 118: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 271 "PHP\\Compiler\\mPHP.flex"
                                                                            
	return new Token(ParserSymbols.T_INT_CAST,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 23: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 906 "PHP\\Compiler\\mPHP.flex"
                     
	return new Token(ParserSymbols.T_ENCAPSED_AND_WHITESPACE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 111: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 124 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_CATCH,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 80: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 645 "PHP\\Compiler\\mPHP.flex"
                                
    if (aspTags || yycharat(yylength()-2) != '%') { /* asp comment? */
		yypushback(yylength()-2);
		yybegin(ST_IN_SCRIPTING);
		return new Token(ParserSymbols.T_COMMENT,yyline+1,yycolumn-2,yytext().Substring(0,yylength()-2));
	} else {
		return yymore();
	}

#line default
          }
          break;
        case 112: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 263 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_CLONE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 33: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 597 "PHP\\Compiler\\mPHP.flex"
                 
	if (aspTags) {
		yybegin(ST_IN_SCRIPTING);
		return new Token(ParserSymbols.T_OPEN_TAG,yyline+1,yycolumn+1,yytext());
	} else {
		return new Token(ParserSymbols.T_INLINE_HTML,yyline+1,yycolumn+1,yytext());
	}

#line default
          }
          break;
        case 138: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 283 "PHP\\Compiler\\mPHP.flex"
                                                                  
	return new Token(ParserSymbols.T_ARRAY_CAST,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 155: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 563 "PHP\\Compiler\\mPHP.flex"
                                                                                        
	return new Token(ParserSymbols.T_METHOD_C,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 27: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 527 "PHP\\Compiler\\mPHP.flex"
                                 
	yypopstate();
	yypushstate(ST_IN_SCRIPTING);
	return new Token(ParserSymbols.T_STRING_VARNAME,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 66: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 698 "PHP\\Compiler\\mPHP.flex"
                                                
	string s = yytext().Substring(1,yylength()-2);
	StringBuilder t = new StringBuilder(s.Length);
	for (int i=0; i<s.Length; i++) {
		if (s[i] == '\\') {
			i++;
			if (i == s.Length) {
				t.Append('\\');
				break;
			}

			switch (s[i]) {
				case 'n':
					t.Append('\n'); break;
				case 'r':
					t.Append('\r'); break;
				case 't':
					t.Append('\t'); break;
				case '\\':
				case '$':
				case '"':
					t.Append(s[i]); break;
				default:
					/* check for an octal */
					if ((i+2 <= s.Length) && isOct(s[i]) && isOct(s[i+1]) && isOct(s[i+2])) {
						char[] octal_buf = {s[i], s[i+1], s[i+2]};
						t.Append(System.Convert.ToChar(System.Convert.ToInt32(new String(octal_buf), 8)));
						i = i+3;
					}
					/* check for a hex */
					else if ((i+2 <= s.Length) && s[i] == 'x' && isHex(s[i+1]) && isHex(s[i+2])) {
						char[] hex_buf = {s[i+1], s[i+2]};
						t.Append(System.Convert.ToChar(System.Convert.ToInt32(new String(hex_buf), 16)));
						i = i+3;
					}
					else {
						t.Append('\\');
					}
					break;
			}

		}
		else {
			t.Append(s[i]);
		}
	}
	return new Token(ParserSymbols.T_CONSTANT_ENCAPSED_STRING,yyline+1,yycolumn+1-2,t.ToString());

#line default
          }
          break;
        case 88: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 439 "PHP\\Compiler\\mPHP.flex"
                        
	return new Token(ParserSymbols.T_SR_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 152: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 172 "PHP\\Compiler\\mPHP.flex"
                               
	return new Token(ParserSymbols.T_ENDFOREACH,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 41: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 132 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_IF,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 37: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 379 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_INC,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 44: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 383 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_DEC,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 99: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 144 "PHP\\Compiler\\mPHP.flex"
                         
	return new Token(ParserSymbols.T_ELSE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 75: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 865 "PHP\\Compiler\\mPHP.flex"
                         
	return new Token(ParserSymbols.T_CHARACTER,yyline+1,yycolumn+1,'\\'.ToString());

#line default
          }
          break;
        case 54: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 475 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_SL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 59: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 459 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_BOOLEAN_AND,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 107: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 347 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_FINAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 86: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 323 "PHP\\Compiler\\mPHP.flex"
                        
	return new Token(ParserSymbols.T_USE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 47: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 479 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_SR,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 158: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 559 "PHP\\Compiler\\mPHP.flex"
                                                                                                            
	return new Token(ParserSymbols.T_FUNC_C,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 29: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 679 "PHP\\Compiler\\mPHP.flex"
                                
	return yymore();

#line default
          }
          break;
        case 34: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 579 "PHP\\Compiler\\mPHP.flex"
                                                                                                                               
	if (shortTags || yylength()>2) { /* yylength()>2 means it's not <? but <script> */
		yybegin(ST_IN_SCRIPTING);
		return new Token(ParserSymbols.T_OPEN_TAG,yyline+1,yycolumn+1,yytext());
	} else {
		return new Token(ParserSymbols.T_INLINE_HTML,yyline+1,yycolumn+1,yytext());
	}

#line default
          }
          break;
        case 116: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 208 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_BREAK,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 109: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 303 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_USING,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 7: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 522 "PHP\\Compiler\\mPHP.flex"
                      
	yypopstate();
	return new Token(ParserSymbols.CURLY_BRACE_CLOSE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 100: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 299 "PHP\\Compiler\\mPHP.flex"
                         
	return new Token(ParserSymbols.T_EVAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 96: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 655 "PHP\\Compiler\\mPHP.flex"
                                    
	yybegin(ST_DOC_COMMENT);
	return yymore();

#line default
          }
          break;
        case 42: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 156 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_DO,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 127: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 275 "PHP\\Compiler\\mPHP.flex"
                                                                                    
	return new Token(ParserSymbols.T_DOUBLE_CAST,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 71: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 887 "PHP\\Compiler\\mPHP.flex"
                                                          
	char c;
	switch (yycharat(1)) {
		case 'n':
			c = '\n'; break;
		case 'r':
			c = '\r'; break;
		case 't':
			c = '\t'; break;
		case '\\':
		case '$':
		case '"':
			c = yycharat(1); break;
		default:
			return new Token(ParserSymbols.T_BAD_CHARACTER,yyline+1,yycolumn+1,yytext());
	}
	return new Token(ParserSymbols.T_CHARACTER,yyline+1,yycolumn+1,c.ToString());

#line default
          }
          break;
        case 68: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 855 "PHP\\Compiler\\mPHP.flex"
                                                
	yypushstate(ST_IN_SCRIPTING);
	yypushback(1);
	return new Token(ParserSymbols.T_CURLY_OPEN,yyline+1,yycolumn-1,yycharat(0).ToString());

#line default
          }
          break;
        case 142: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 343 "PHP\\Compiler\\mPHP.flex"
                             
	return new Token(ParserSymbols.T_ABSTRACT,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 148: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 228 "PHP\\Compiler\\mPHP.flex"
                              
	return new Token(ParserSymbols.T_INTERFACE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 65: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 683 "PHP\\Compiler\\mPHP.flex"
                                                                
	yybegin(YYINITIAL);
	return new Token(ParserSymbols.T_CLOSE_TAG,yyline+1,yycolumn+1,yytext());  /* implicit ';' at php-end tag */

#line default
          }
          break;
        case 8: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 627 "PHP\\Compiler\\mPHP.flex"
                           
	yybegin(ST_ONE_LINE_COMMENT);
	return yymore();

#line default
          }
          break;
        case 18: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 829 "PHP\\Compiler\\mPHP.flex"
                        
	return new Token(ParserSymbols.T_ENCAPSED_AND_WHITESPACE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 98: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 216 "PHP\\Compiler\\mPHP.flex"
                         
	return new Token(ParserSymbols.T_ECHO,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 57: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 431 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_MOD_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 137: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 295 "PHP\\Compiler\\mPHP.flex"
                                                                    
	return new Token(ParserSymbols.T_UNSET_CAST,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 97: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 100 "PHP\\Compiler\\mPHP.flex"
                         
	return new Token(ParserSymbols.T_EXIT,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 35: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 551 "PHP\\Compiler\\mPHP.flex"
                                         
	return new Token(ParserSymbols.T_DNUMBER,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 52: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 399 "PHP\\Compiler\\mPHP.flex"
                            
	return new Token(ParserSymbols.T_IS_NOT_EQUAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 50: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 367 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_DOUBLE_ARROW,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 12: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 806 "PHP\\Compiler\\mPHP.flex"
                      
	yybegin(ST_BACKQUOTE);
	return new Token(ParserSymbols.BACK_QUOTE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 91: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 391 "PHP\\Compiler\\mPHP.flex"
                        
	return new Token(ParserSymbols.T_IS_NOT_IDENTICAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 141: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 212 "PHP\\Compiler\\mPHP.flex"
                             
	return new Token(ParserSymbols.T_CONTINUE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 105: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 331 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_ISSET,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 95: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 882 "PHP\\Compiler\\mPHP.flex"
                                                                 
	char c = System.Convert.ToChar(System.Convert.ToInt32(yytext().Substring(1,3), 16));
	return new Token(ParserSymbols.T_CHARACTER,yyline+1,yycolumn+1,c.ToString());

#line default
          }
          break;
        case 17: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 910 "PHP\\Compiler\\mPHP.flex"
                        
	yybegin(ST_IN_SCRIPTING);
	return new Token(ParserSymbols.DOUBLE_QUOTES,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 128: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 291 "PHP\\Compiler\\mPHP.flex"
                                                                             
	return new Token(ParserSymbols.T_BOOL_CAST,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 70: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 517 "PHP\\Compiler\\mPHP.flex"
                                                
	yypushstate(ST_LOOKING_FOR_VARNAME);
	return new Token(ParserSymbols.T_DOLLAR_OPEN_CURLY_BRACES,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 124: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 192 "PHP\\Compiler\\mPHP.flex"
                           
	return new Token(ParserSymbols.T_SWITCH,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 104: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 335 "PHP\\Compiler\\mPHP.flex"
                          
	return new Token(ParserSymbols.T_EMPTY,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 49: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 255 "PHP\\Compiler\\mPHP.flex"
                       
	return new Token(ParserSymbols.T_PAAMAYIM_NEKUDOTAYIM,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 31: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 640 "PHP\\Compiler\\mPHP.flex"
                                
	yybegin(ST_IN_SCRIPTING);
	return new Token(ParserSymbols.T_COMMENT,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 129: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 327 "PHP\\Compiler\\mPHP.flex"
                           
	return new Token(ParserSymbols.T_GLOBAL,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 93: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 467 "PHP\\Compiler\\mPHP.flex"
                        
	return new Token(ParserSymbols.T_LOGICAL_AND,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 84: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 104 "PHP\\Compiler\\mPHP.flex"
                        
	return new Token(ParserSymbols.T_EXIT,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        case 157: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 319 "PHP\\Compiler\\mPHP.flex"
                                 
	return new Token(ParserSymbols.T_REQUIRE_ONCE,yyline+1,yycolumn+1,yytext());

#line default
          }
          break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case ST_DOC_COMMENT:
              if (ZZ_SPURIOUS_WARNINGS_SUCK)
              {
#line 929 "PHP\Compiler\mPHP.flex"
                                    
	Console.Out.WriteLine("Warning: Unterminated comment at the end of input.");
	return new Token(ParserSymbols.EOF,yyline+1,yycolumn+1,yytext());

#line default
              }
              break;
            case ST_BACKQUOTE:
              if (ZZ_SPURIOUS_WARNINGS_SUCK)
              {
#line 925 "PHP\Compiler\mPHP.flex"
                                                                                          
	return new Token(ParserSymbols.EOF,yyline+1,yycolumn+1,yytext());

#line default
              }
              break;
            case ST_LOOKING_FOR_PROPERTY:
              if (ZZ_SPURIOUS_WARNINGS_SUCK)
              {
#line 925 "PHP\Compiler\mPHP.flex"
                                                                                          
	return new Token(ParserSymbols.EOF,yyline+1,yycolumn+1,yytext());

#line default
              }
              break;
            case YYINITIAL:
              if (ZZ_SPURIOUS_WARNINGS_SUCK)
              {
#line 925 "PHP\Compiler\mPHP.flex"
                                                                                          
	return new Token(ParserSymbols.EOF,yyline+1,yycolumn+1,yytext());

#line default
              }
              break;
            case ST_DOUBLE_QUOTES:
              if (ZZ_SPURIOUS_WARNINGS_SUCK)
              {
#line 925 "PHP\Compiler\mPHP.flex"
                                                                                          
	return new Token(ParserSymbols.EOF,yyline+1,yycolumn+1,yytext());

#line default
              }
              break;
            case ST_IN_SCRIPTING:
              if (ZZ_SPURIOUS_WARNINGS_SUCK)
              {
#line 925 "PHP\Compiler\mPHP.flex"
                                                                                          
	return new Token(ParserSymbols.EOF,yyline+1,yycolumn+1,yytext());

#line default
              }
              break;
            case ST_COMMENT:
              if (ZZ_SPURIOUS_WARNINGS_SUCK)
              {
#line 929 "PHP\Compiler\mPHP.flex"
                                    
	Console.Out.WriteLine("Warning: Unterminated comment at the end of input.");
	return new Token(ParserSymbols.EOF,yyline+1,yycolumn+1,yytext());

#line default
              }
              break;
            default:
              if (ZZ_SPURIOUS_WARNINGS_SUCK)
              {   return new TUVienna.CS_CUP.Runtime.Symbol(ParserSymbols.EOF);
 }
              break;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
          break;
      }
    }
  }


}
